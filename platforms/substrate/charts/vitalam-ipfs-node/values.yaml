# fullNameOverride:

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This section contains the ipfs node config values
config:
  healthCheckPort: 80
  # nodeHost: "" # This overrides vitalamNode.enabled
  # nodePort:
# Sets the log level - default trace, example values: all, debug, off, info, fatal
  logLevel: trace
# Sets the ipfs api port - default
  ipfsApiPort: 5001
# Sets the ipfs swarm port - default 4001
  ipfsSwarmPort: 4001
# Remote location where ipfs will store data - default /ipfs
  ipfsDataPath: "/ipfs"
# Remote location in which the ipfs binary is stored - default /usr/local/bin/ipfs
  ipfsCommand: "/usr/local/bin/ipfs"
  ipfsArgs:
    - daemon
  # ipfsBootNodeAddress: /dnsaddr/blah.test.com/p2p/PeerId # Valid Format for this is /multiaddr/PeerId see https://github.com/multiformats/multiaddr
  # Sets the ipfs log level - default trace, example values: debug, info, warn, error, dpanic, panic, fatal
  ipfsLogLevel: trace
  enableLivenessProbe: true

# This section contains the values relating to the ipfs image as of now the image is pulled from the digicatapult github container registry
image:
# Image repository in which the ipfs node image will be pulled from - default pull from ghcr.io/digicatapult/vitalam-ipfs
  repository: ghcr.io/digicatapult/vitalam-ipfs
# If the image is not present in the kubernetes docker daemon it will attempt to pull the image from the aforementioned repository - default IfNotPresent
  pullPolicy: IfNotPresent
# Specifying the version of the image to pull - default 1.2.3
  tag: 'v1.2.6'

# This section contains the values relating to the ipfs storage and data volume size
storage:
# Default for storage class is gcpstorageclass
  storageClass: ""
# Sets the volume size for the above storageClass - default 1
  dataVolumeSize: 1  # in Gigabytes

# Determines whether this ipfs node is a vitalAM node or not
vitalamNode:
  enabled: true

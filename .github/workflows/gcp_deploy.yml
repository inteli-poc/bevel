##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Deploy DLT network supported by Hyperledger Bevel on GCP environment
# Prerequisites
#   - A GKE Cluster accessible from GitHub Runner
#   - A Vault instance accessible from GitHub Runner
#   - A completed network.yaml file on Github Secrets
# This workflow can triggered manually
# 
# In summary, this pipeline does the following
# 1. Prepare deployment environment files
# 2. Depending on the branch, deploys DLT network

name: Deploy DLT network

on:
  workflow_dispatch:    
  push:
    branches: 
      - 'substrate'
      - 'vitalam'
    paths-ignore:
      - '**/releases/**'

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GCLOUD_PROJECT: ${{ secrets.GCP_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}    # Add your cluster name here.
  GKE_REGION: ${{ secrets.GKE_REGION }}  # Add your cluster zone here.
  GITOPS_CREDS: ${{ secrets.GITOPS_PRIVATE_KEY }}
  VAULT_CREDS: ${{ secrets.VAULT_PRIVATE_KEY }}
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  VAULT_SERVER: ${{ secrets.VAULT_URL }}
  VAULT_PORT: ${{ secrets.VAULT_PORT }}
  VAULT_BASTION: ${{ secrets.VAULT_BASTION }}
  GKE_CONTEXT: ${{ secrets.GKE_CONTEXT }}
  SSH_SERVER_ALIVE_INTERVAL: 60
  SSH_SERVER_ALIVE_COUNT_MAX: 20

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: gcp_development
    strategy:
      max-parallel: 1
    steps:
    # checkout git repo
    - name: Git checkout
      uses: actions/checkout@v2.4.0
    # Install dependencies
    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ env.GCLOUD_PROJECT }}
    # Get current branch
    - name: Set output
      id: vars
      run: echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
    - uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_REGION }}
    
    - name: Prepare build environment
      run: |
        ansible --version
        kubectl get services -o wide        
        
        mkdir -p build
        mkdir ~/.ssh
        LOCAL_BUILD_PATH=$(pwd)/build
        echo $LOCAL_BUILD_PATH
        curl https://ipv4.icanhazip.com/ > ./build/localip
        mv $KUBECONFIG ./build/config
        
        gcloud compute firewall-rules update allow-github-ssh --source-ranges=$(cat ./build/localip)/32
        set +x
        echo $GITOPS_CREDS > ${LOCAL_BUILD_PATH}/gitops
        echo $VAULT_CREDS > ~/.ssh/vault.pem
        set -x
        chmod 400 ${LOCAL_BUILD_PATH}/gitops
        chmod 400  ~/.ssh/vault.pem
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-keyscan ${VAULT_BASTION} >> ~/.ssh/known_hosts
        echo "127.0.0.1 ${VAULT_SERVER}" > /etc/hosts
        echo "ServerAliveInterval ${SSH_SERVER_ALIVE_INTERVAL}" >> ~/.ssh/config
        echo "ServerAliveCountMax ${SSH_SERVER_ALIVE_COUNT_MAX}" >> ~/.ssh/config
        ssh -i ~/.ssh/vault.pem -f -q -N -L ${VAULT_PORT}:${VAULT_SERVER}:${VAULT_PORT} ubuntu@${VAULT_BASTION}
        cp platforms/substrate/configuration/samples/network-${{ steps.vars.outputs.branch }}.yaml build/network.yaml

        git config --global user.email "bevel@inteli-poc.com"
        git config --global user.name "bevel"
        git config --global push.default matching

        sed -i -e 's+/BUILD_DIR+${LOCAL_BUILD_PATH}+g' build/network.yaml
        sed -i -e 's*VAULT_TOKEN*${VAULT_TOKEN}*g' build/network.yaml
        sed -i -e 's*VAULT_URL*${VAULT_SERVER}*g' build/network.yaml
        sed -i -e 's*VAULT_PORT*${VAULT_PORT}*g' build/network.yaml
        sed -i -e 's*GKE_CONTEXT*${GKE_CONTEXT}*g' build/network.yaml

    - name: Deploy DLT platform
      uses: dawidd6/action-ansible-playbook@v2
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        ANSIBLE_STDOUT_CALLBACK: "yaml"
      with:
        # Required, playbook filepath
        playbook: platforms/shared/configuration/site.yaml
        requirements: platforms/shared/configuration/requirements.yaml
        # Mandatory, additional flags to pass to ansible-playbook
        options: |
          -e "@build/network.yaml"
          -e "no_ansible_log=true"
  post-deployment:
    if: ${{ always() }}
    needs: [deployment]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
    steps:  
    # Install dependencies
    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ env.GCLOUD_PROJECT }}
      # # GCP Authentication
      # - name: Authenticate to Google Cloud
      #   uses: 'google-github-actions/auth@v0.4.1'
      #   with:
      #     credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
    # Remove github runner in gke network config
    - name: Remove github runner in firewall rule
      continue-on-error: true
      run: |
        gcloud compute firewall-rules update allow-github-ssh --source-ranges= 
